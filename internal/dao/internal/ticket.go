// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// TicketDao is the data access object for table ticket.
type TicketDao struct {
	table   string        // table is the underlying table name of the DAO.
	group   string        // group is the database configuration group name of current DAO.
	columns TicketColumns // columns contains all the column names of Table for convenient usage.
}

// TicketColumns defines and stores column names for table ticket.
type TicketColumns struct {
	Id          string //
	Code        string // 工单号
	Title       string // 工单标题
	Description string // 问题描述
	CreatUserId string // 创建人id
	Type        string // 工单类型，0 问题工单，1 需求工单
	CreatedAt   string // 工单创建时间
	HandlerId   string // 处理人id
	ReasonId    string // 问题原因id
	DealReason  string // 解决办法
	UpdatedAt   string // 更新时间
	Status      string // 工单状态
}

//  ticketColumns holds the columns for table ticket.
var ticketColumns = TicketColumns{
	Id:          "id",
	Code:        "code",
	Title:       "title",
	Description: "description",
	CreatUserId: "creat_user_id",
	Type:        "type",
	CreatedAt:   "created_at",
	HandlerId:   "handler_id",
	ReasonId:    "reason_id",
	DealReason:  "deal_reason",
	UpdatedAt:   "updated_at",
	Status:      "status",
}

// NewTicketDao creates and returns a new DAO object for table data access.
func NewTicketDao() *TicketDao {
	return &TicketDao{
		group:   "default",
		table:   "ticket",
		columns: ticketColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *TicketDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *TicketDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *TicketDao) Columns() TicketColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *TicketDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *TicketDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *TicketDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
